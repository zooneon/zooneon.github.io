{"version":3,"file":"component---src-pages-search-js-0211d4d61592e0a957ba.js","mappings":"uOAQA,MAAMA,EAAsBC,EAAAA,QAAOC,IAAGC,WAAA,CAAAC,YAAA,8BAAAC,YAAA,gBAAVJ,CAAU,iBAIhCK,EAAqBL,EAAAA,QAAOC,IAAGC,WAAA,CAAAC,YAAA,6BAAAC,YAAA,gBAAVJ,CAAU,yBAI/BM,EAAcN,EAAAA,QAAOO,GAAEL,WAAA,CAAAC,YAAA,sBAAAC,YAAA,gBAATJ,CAAS,uDAEjBQ,GAAgC,UAArBA,EAAMC,MAAMC,KAAmB,OAAS,WAG3DC,EAAAA,EAAMC,MAAM;;KAKVC,EAAmBb,EAAAA,QAAOc,EAACZ,WAAA,CAAAC,YAAA,2BAAAC,YAAA,gBAARJ,CAAQ,iCACrBQ,GAAgC,UAArBA,EAAMC,MAAMC,KAAmB,OAAS,YAIzDK,EAAYf,EAAAA,QAAOC,IAAGC,WAAA,CAAAC,YAAA,oBAAAC,YAAA,gBAAVJ,CAAU,oGAEhBQ,GAAgC,UAArBA,EAAMC,MAAMC,KAAmB,OAAS,YAKjDF,GAAgC,UAArBA,EAAMC,MAAMC,KAAmB,OAAS,YA2EpDM,EAAOC,IAAmB,IAAlB,SAAEC,GAAUD,EAC/B,MACME,EADS,IAAIC,gBAAgBF,EAASG,QACvBC,IAAI,MAAQ,GACjC,OAAOC,EAAAA,cAACC,EAAAA,EAAG,CAACC,MAAON,EAAQ,IAAIA,WAAiB,MAAQ,EAG1D,UAzEmBO,IAAyB,IAAxB,KAAEC,EAAI,SAAET,GAAUQ,EACpC,MAAME,EAAWD,EAAKE,kBAAkBC,OAClC,EAACC,EAAc,EAACC,IAAoBC,EAAAA,EAAAA,UAAS,KAC7C,EAACC,EAAY,EAACC,IAAkBF,EAAAA,EAAAA,UAAS,IAiC/C,OA/BAG,EAAAA,EAAAA,YAAU,KACR,MACMjB,EADS,IAAIC,gBAAgBF,EAASG,QACvBC,IAAI,MAAQ,GAGjC,GAFAa,EAAehB,GAEXA,EAAO,CAET,MAAMkB,EAAiBlB,EAAMmB,cAGvBC,EAAgBX,EAASY,QAAOC,IAAe,IAAd,KAAEC,GAAMD,EAC7C,MAAM,MAAEhB,EAAK,KAAEkB,GAASD,EAAKE,aACvB,QAAEC,GAAYH,EAEdI,EACJrB,GAASA,EAAMa,cAAcS,SAASV,GAClCW,EACJL,GACAA,EAAKM,MAAMC,GAAQA,EAAIZ,cAAcS,SAASV,KAC1Cc,EACJN,GAAWA,EAAQP,cAAcS,SAASV,GAE5C,OAAOS,GAAcE,GAAaG,CAAY,IAGhDnB,EAAiBO,EACnB,MACEP,EAAiB,GACnB,GACC,CAACd,EAASG,OAAQO,IAGnBL,EAAAA,cAAC6B,EAAAA,EAAM,KACL7B,EAAAA,cAACxB,EAAmB,KACjBmC,EACCX,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAClB,EAAkB,KACjBkB,EAAAA,cAACjB,EAAW,KAAC,IAAE4B,EAAY,WAC3BX,EAAAA,cAACV,EAAgB,KACdkB,EAAcsB,OAAO,kBAIzBtB,EAAcsB,OAAS,EACtB9B,EAAAA,cAAC+B,EAAAA,EAAQ,CAACC,MAAOxB,IAEjBR,EAAAA,cAACR,EAAS,KACRQ,EAAAA,cAAA,UAAI,eACJA,EAAAA,cAAA,SAAG,uBAKTA,EAAAA,cAAClB,EAAkB,KACjBkB,EAAAA,cAACjB,EAAW,KAAC,gBAIZ,C","sources":["webpack://gatsby-minimal-blog/./src/pages/search.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { graphql } from 'gatsby';\nimport Layout from '../components/layout';\nimport Seo from '../components/seo';\nimport { PostList } from '../components/PostList';\nimport styled from 'styled-components';\nimport media from '../utils/media';\n\nconst SearchPageContainer = styled.div`\n  width: 100%;\n`;\n\nconst SearchResultHeader = styled.div`\n  margin: 2rem 0 3rem;\n`;\n\nconst SearchTitle = styled.h1`\n  font-size: 2.2rem;\n  color: ${(props) => (props.theme.mode === 'light' ? '#333' : '#f5f5f5')};\n  margin-bottom: 1rem;\n\n  ${media.tablet`\n    font-size: 1.8rem;\n  `}\n`;\n\nconst SearchResultInfo = styled.p`\n  color: ${(props) => (props.theme.mode === 'light' ? '#666' : '#d0d0d0')};\n  font-size: 1.3rem;\n`;\n\nconst NoResults = styled.div`\n  margin: 4rem 0;\n  color: ${(props) => (props.theme.mode === 'light' ? '#666' : '#d0d0d0')};\n\n  h2 {\n    font-size: 1.8rem;\n    margin-bottom: 1rem;\n    color: ${(props) => (props.theme.mode === 'light' ? '#333' : '#f0f0f0')};\n  }\n\n  p {\n    font-size: 1.4rem;\n  }\n`;\n\nconst SearchPage = ({ data, location }) => {\n  const allPosts = data.allMarkdownRemark.edges;\n  const [searchResults, setSearchResults] = useState([]);\n  const [searchQuery, setSearchQuery] = useState('');\n\n  useEffect(() => {\n    const params = new URLSearchParams(location.search);\n    const query = params.get('q') || '';\n    setSearchQuery(query);\n\n    if (query) {\n      // 검색어를 소문자로 변환\n      const lowerCaseQuery = query.toLowerCase();\n\n      // 제목, 태그, 내용에서 검색\n      const filteredPosts = allPosts.filter(({ node }) => {\n        const { title, tags } = node.frontmatter;\n        const { excerpt } = node;\n\n        const titleMatch =\n          title && title.toLowerCase().includes(lowerCaseQuery);\n        const tagsMatch =\n          tags &&\n          tags.some((tag) => tag.toLowerCase().includes(lowerCaseQuery));\n        const contentMatch =\n          excerpt && excerpt.toLowerCase().includes(lowerCaseQuery);\n\n        return titleMatch || tagsMatch || contentMatch;\n      });\n\n      setSearchResults(filteredPosts);\n    } else {\n      setSearchResults([]);\n    }\n  }, [location.search, allPosts]);\n\n  return (\n    <Layout>\n      <SearchPageContainer>\n        {searchQuery ? (\n          <>\n            <SearchResultHeader>\n              <SearchTitle>\"{searchQuery}\" 검색 결과</SearchTitle>\n              <SearchResultInfo>\n                {searchResults.length}개의 포스트를 찾았습니다\n              </SearchResultInfo>\n            </SearchResultHeader>\n\n            {searchResults.length > 0 ? (\n              <PostList posts={searchResults} />\n            ) : (\n              <NoResults>\n                <h2>검색 결과가 없습니다</h2>\n                <p>다른 검색어로 다시 시도해보세요</p>\n              </NoResults>\n            )}\n          </>\n        ) : (\n          <SearchResultHeader>\n            <SearchTitle>검색어를 입력하세요</SearchTitle>\n          </SearchResultHeader>\n        )}\n      </SearchPageContainer>\n    </Layout>\n  );\n};\n\nexport const Head = ({ location }) => {\n  const params = new URLSearchParams(location.search);\n  const query = params.get('q') || '';\n  return <Seo title={query ? `\"${query}\" 검색 결과` : '검색'} />;\n};\n\nexport default SearchPage;\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n      edges {\n        node {\n          id\n          excerpt(pruneLength: 160)\n          fields {\n            slug\n            readingTime {\n              text\n            }\n          }\n          frontmatter {\n            date(formatString: \"YYYY년 MM월 DD일\")\n            title\n            tags\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["SearchPageContainer","styled","div","withConfig","displayName","componentId","SearchResultHeader","SearchTitle","h1","props","theme","mode","media","tablet","SearchResultInfo","p","NoResults","Head","_ref3","location","query","URLSearchParams","search","get","React","Seo","title","_ref","data","allPosts","allMarkdownRemark","edges","searchResults","setSearchResults","useState","searchQuery","setSearchQuery","useEffect","lowerCaseQuery","toLowerCase","filteredPosts","filter","_ref2","node","tags","frontmatter","excerpt","titleMatch","includes","tagsMatch","some","tag","contentMatch","Layout","length","PostList","posts"],"sourceRoot":""}