{"componentChunkName":"component---src-templates-blog-post-js","path":"/class-diagram/","result":{"data":{"site":{"siteMetadata":{"title":"zooneon's log","author":"zooneon"}},"markdownRemark":{"id":"c2002c0c-005c-5f03-a663-842e6eda114d","excerpt":"최근에 시작한 프로젝트가 설계 단계에 들어갔다.\n먼저 팀원들과 서비스 주제와 도메인을 설정하고 도메인별 use case…","html":"<p>최근에 시작한 프로젝트가 설계 단계에 들어갔다.<br/>\n먼저 팀원들과 서비스 주제와 도메인을 설정하고 도메인별 use case를 작성하였다.<br/>\n이를 바탕으로 본격적인 설계를 시작했고, 객체 설계를 위해 클래스 다이어그램을 그리기로 했다.<br/>\n클래스 다이어그램에 대해 잘 몰랐던 나는 이번 기회에 어떻게 작성하는 것인지 찾아보았고,<br/>\n내가 찾아본 내용들을 정리해보려 한다.<br/></p>\n<h1>UML</h1>\n<p>UML(Unified Modeling Language)은 통합 모델링 언어로, 소프트웨어 개념들을 다이어그램으로 표현하기 위해 사용하는 시각적인 표기법이다.<br/>\nUML은 설계 논의 및 의사소통을 위해 작성하기도 하고, 전체 시스템의 구조 및 클래스의 의존성을 파악하기 위해 사용하기도 한다.<br/>\nUML 다이어그램의 종류에는 정적 다이어그램, 동적 다이어그램, 물리적 다이어그램이 있다.<br/></p>\n<ul>\n<li>정적 다이어그램 : 클래스, 객체, 데이터 구조와 이것들의 관계를 그림으로 표현하여 소프트웨어 요소에서 변하지 않는 논리적 구조를 보여준다.</li>\n<li>동적 다이어그램 : 실행 흐름을 그리거나 상태가 어떻게 변하는지 그림으로 표현하여 소프트웨어 실행 도중에 어떻게 변하는지 보여준다.</li>\n<li>물리적 다이어그램 : 소스 파일, 라이브러리, 데이터 파일 등의 물리적인 요소들과 이것들의 관계를 그림으로 표현해서 소프트웨어 요소에서 변하지 않는 물리적 구조를 보여준다.</li>\n</ul>\n<p>이번 글에서는 정적 다이어그램 중 하나인 클래스 다이어그램에 대해 알아볼 것이다.<br/></p>\n<h1>클래스 다이어그램</h1>\n<ul>\n<li>클래스 다이어그램은 정적 다이어그램으로, 시스템을 구성하는 클래스들 간의 관계를 표현하는 다이어그램이다.</li>\n<li><a href=\"https://draw.io\">draw.io</a>에서 클래스 다이어그램을 작성할 수 있다.</li>\n</ul>\n<img width=\"800\" alt=\"1\" src=\"https://user-images.githubusercontent.com/59433441/152305590-243eb77e-627a-415c-95ae-514a87cc2984.png\">\n<p>아주 간단한 클래스 다이어그램의 모습이다.<br/>\n그림에서 볼 수 있듯이 클래스 다이어그램은 클래스 간의 의존 관계를 보여준다.<br/>\n이 다이어그램으로 클래스들 사이의 관계를 어떻게 표현하는지 알아보자.<br/></p>\n<h2>클래스의 표현</h2>\n<img width=\"250\" alt=\"2\" src=\"https://user-images.githubusercontent.com/59433441/152305751-35e2296e-f481-4492-9979-5bd70ac7bf8d.png\">\n<ul>\n<li>클래스는 3칸으로 표현할 수 있다.</li>\n<li>제일 윗 부분에는 클래스의 이름을 작성하고, 중간 부분에는 클래스의 속성(클래스의 변수)을 작성한다.</li>\n<li>그리고 맨 마지막 칸에는 클래스의 행위(클래스의 메서드)를 작성하면 된다.</li>\n<li>각 항목 앞에 붙는 +, -와 같은 기호는 접근제어자를 나타내며 항목 뒤에는 인자의 타입과 함수의 반환형을 나타낸다.</li>\n</ul>\n<p><strong>접근제어자</strong></p>\n<blockquote>\n<p><code class=\"language-text\">+</code> : public<br/> > <code class=\"language-text\">-</code> : private<br/> > <code class=\"language-text\"># </code>: protected<br/></p>\n</blockquote>\n<p>분석 단계의 클래스에서는 접근제어자를 빼고 사용할 수도 있다.<br/></p>\n<img width=\"250\" alt=\"3\" src=\"https://user-images.githubusercontent.com/59433441/152305661-03cbca82-f80b-4c6b-bc8c-a11b5c4615ca.png\">\n<h2>클래스 간의 관계 표현</h2>\n<img width=\"800\" alt=\"4\" src=\"https://user-images.githubusercontent.com/59433441/152305830-8d0edf35-7d66-4141-9329-92616f9467ce.png\">\n<p>출처 : <a href=\"http://www.nextree.co.kr/p6753/\">http://www.nextree.co.kr/p6753/</a></p>\n<h3>일반화 관계(Generalization)</h3>\n<ul>\n<li>일반화 관계는 상속 관계(IS-A 관계)를 표현한다.</li>\n<li>실선에 빈 화살표로 표시한다.</li>\n</ul>\n<img width=\"600\" alt=\"5\" src=\"https://user-images.githubusercontent.com/59433441/152306073-af01af62-9ebe-4bdf-acfd-0f6c8fbb92fd.png\">\n<p>이 다이어그램을 코드로 표현하면 다음과 같다.<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> address<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">//...</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">//...</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> studentId<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> major<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">study</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">//...</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>실체화 단계(Realization)</h3>\n<ul>\n<li>실체화 단계는 인터페이스의 스펙만 있는 메서드를 오버라이딩 하여 실제 기능으로 구현하는 것을 말한다.</li>\n<li>점선과 빈 화살표로 표시한다.</li>\n</ul>\n<img width=\"600\" alt=\"6\" src=\"https://user-images.githubusercontent.com/59433441/152306171-59c2eb01-4f1d-4ce3-a990-ad173eacb62a.png\">\n<p>인터페이스를 나타낼 때는 클래스처럼 표기하고 인터페이스 이름 위에 <code class=\"language-text\">&lt;&lt;interface>></code>를 추가하면 된다.<br/>\n위 다이어그램을 코드로 표현하면 다음과 같다.<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ToDo</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ToDo</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">//...</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"밥 먹기\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"잠 자기\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>의존 관계(Dependency)</h3>\n<ul>\n<li>의존 관계는 어떤 클래스가 다른 클래스를 참조하는 것을 말한다.</li>\n<li>점선과 화살표로 표현한다.</li>\n</ul>\n<img width=\"600\" alt=\"7\" src=\"https://user-images.githubusercontent.com/59433441/152306209-08581c36-683a-44f9-800b-712f7fdc7213.png\">\n<p>참조의 형태는 메서드 내에서 대상 클래스의 객체 생성, 객체 사용, 메서드 호출, 객체 리턴, 매개변수로 해당 객체를 받는 것 등을 말한다.<br/>\n의존 관계의 목적 또는 형태가 중요할 경우 위와 같이 스테레오 타입(&#x3C;&#x3C; >>)으로 어떠한 목적의 Dependency인지 의미를 명시할 수 있다.<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> carNumber<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> model<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token comment\">//...</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">//...</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">drive</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Car</span> car<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"신나는 드라이브\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcar<span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>해당 객체의 참조를 계속 유지하지 않고, 메서드의 호출이 끝나면 사용한 클래스와의 관계가 마무리된다.<br/></p>\n<h3>연관 관계 &#x26; 직접 연관 관계(Association &#x26; Direct Association)</h3>\n<ul>\n<li>클래스 다이어그램에서 연관 관계는 다른 객체의 참조를 가지는 필드를 의미한다.</li>\n<li>연관 관계와 직접 연관 관계의 차이는 방향성의 유무이다.</li>\n<li>직접 연관 관계는 방향성을 갖는데, 방향성으로 참조 하는 쪽과 참조 당하는 쪽을 구분한다.</li>\n<li>연관 관계는 실선으로 표현하고, 직접 연관 관계는 화살표로 표현한다.</li>\n</ul>\n<img width=\"600\" alt=\"8\" src=\"https://user-images.githubusercontent.com/59433441/152306292-03f6179f-e97c-4d59-857d-b1b5a49b6450.png\">\n<p>학생과 과목의 관계를 연관 관계로 표현한 것이다.<br/>\n실선 위에 <code class=\"language-text\">0..*</code> 은 Multiplicity를 나타내는데, 이는 대상 클래스의 가질 수 있는 인스턴스 개수 범위를 의미한다.<br/>\n점으로 구분하며 앞에 값은 최소값을 의미하고 뒤에 값은 최대값을 의미한다.<br/></p>\n<p><strong>연관 관계의 숫자 표현</strong><br/></p>\n<blockquote>\n<p>1 : 1개<br/>\n0..1 : 0 또는 1개<br/> > <code class=\"language-text\">*</code> : 0 ~ n개<br/>\n1..* : 1 ~ n개<br/>\nn..m : n ~ m개<br/></p>\n</blockquote>\n<p>즉, 위의 다이어그램은 학생들은 여러 과목을 수강할 수 있고, 각 과목은 수강 신청한 학생들의 목록을 갖고 있도록 표현한 것이다.<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Subject</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">//...</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">></span></span> studentList<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addStudent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span> student<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tstudentList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">//...</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Subject</span><span class=\"token punctuation\">></span></span> subjectList<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addSubject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Subject</span> subject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tsubjectList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>subject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<h3>집약 관계 &#x26; 합성 관계(Aggregation &#x26; Composition)</h3>\n<ul>\n<li>집약 관계와 합성 관계는 연관 관계의 특수한 경우이다.</li>\n<li>이들은 집합 관계로, 전체와 부분의 관계를 명확하게 명시하고자 할 때 사용한다.</li>\n</ul>\n<p><strong>집약 관계(Aggregation)</strong><br/></p>\n<ul>\n<li>집약 관계는 한 객체가 다른 객체를 포함하는 관계이다.</li>\n<li>부분을 나타내는 객체를 다른 객체와 공유할 수 있으며, 전체 객체의 라이프타임과 부분 객체의 라이프타임이 독립적일 때(전체 객체가 메모리에서 사라져도 부분 객체는 사라지지 않을 때) 집약 관계를 이용하여 표현한다.</li>\n<li>실선과 비어 있는 마름모로 표현하며, 마름모가 가르키고 있는 객체가 전체 객체이다.</li>\n</ul>\n<img width=\"450\" alt=\"9\" src=\"https://user-images.githubusercontent.com/59433441/152306427-7f39e7b0-8590-49e8-804e-a3d2e0efd74d.png\">\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">//...</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Engine</span> engine<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Radio</span> radio<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Engine</span> engine<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Radio</span> radio<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>engine <span class=\"token operator\">=</span> engine<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>radio <span class=\"token operator\">=</span> radio<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Engine</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Radio</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>합성 관계(Composition)</strong><br/></p>\n<ul>\n<li>합성 관계는 부분 객체가 전체 객체에 속하는 관계에 이용한다.</li>\n<li>집약 관계와 달리 부분 객체를 다른 객체와 공유할 수 없으며, 부분 객체의 라이프타임이 전체 객체의 라이프타임에 종속적일 때(전체 객체가 메모리에서 사라지면 부분 객체도 사라질 때) 합성 관계로 표현한다.</li>\n<li>실선과 내부가 채워져 있는 마름모로 표현하며, 마찬가지로 마름모가 가르키고 있는 객체가 전체 객체이다.</li>\n</ul>\n<img width=\"450\" alt=\"10\" src=\"https://user-images.githubusercontent.com/59433441/152306429-326f7ed8-c48d-4aea-9e05-dee607840a16.png\">\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">//...</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Engine</span> engine<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Radio</span> radio<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tengine <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Engine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tradio <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Radio</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Engine</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Radio</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>집약 관계와 달리 전체 객체의 생성자 내부에서 부분 객체를 생성하여 사용한다.<br/>\n이로써 전체 객체가 부분 객체의 라이프타임을 관리할 수 있다.<br/></p>\n<br/>\n<hr>\n<h3>참고</h3>\n<ul>\n<li><a href=\"https://www.nextree.co.kr/p6753\">https://www.nextree.co.kr/p6753</a></li>\n</ul>","fields":{"readingTime":{"text":"12 min read"}},"frontmatter":{"title":"클래스 다이어그램","date":"May 13, 2021"}}},"pageContext":{"slug":"/class-diagram/","previous":{"fields":{"slug":"/about-singleton-pattern/"},"frontmatter":{"title":"싱글톤 패턴에 대해 알아보자","tags":null}},"next":{"fields":{"slug":"/use-objectmapper-to-parse-json/"},"frontmatter":{"title":"ObjectMapper를 이용하여 JSON 파싱하기","tags":null}}}},"staticQueryHashes":["3649515864","461697574","983108779"],"slicesMap":{}}