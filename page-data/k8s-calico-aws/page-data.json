{"componentChunkName":"component---src-templates-blog-post-js","path":"/k8s-calico-aws/","result":{"data":{"site":{"siteMetadata":{"title":"zooneon's log","author":"zooneon"}},"markdownRemark":{"id":"146059e0-6358-508b-9bce-292390711158","excerpt":"AWS EC2를 이용하여 쿠버네티스 클러스터를 구축하고 CNI 플러그인으로 Calico를 사용하기 위해서는 몇 가지 설정이 필요하다. 먼저 테스트 환경은 다음과 같다. Kubernetes v1.21.1 Docker v20.10.21 Calico v…","html":"<p>AWS EC2를 이용하여 쿠버네티스 클러스터를 구축하고 CNI 플러그인으로 Calico를 사용하기 위해서는 몇 가지 설정이 필요하다.</p>\n<p>먼저 테스트 환경은 다음과 같다.</p>\n<ul>\n<li>Kubernetes v1.21.1</li>\n<li>Docker v20.10.21</li>\n<li>Calico v3.24.5</li>\n</ul>\n<h2>BGP Peering</h2>\n<p>기본적으로 Calico는 호스트 간 라우팅 정보를 공유하기 위해 BGP 프로토콜을 사용한다.</p>\n<p>Calico를 설치하게 되면 Calico의 <code class=\"language-text\">BIRD</code> 컴포넌트에 의해 calico-node 간 <code class=\"language-text\">BGP Peering</code>이 발생하게 되는데, 이를 위해 179번 포트를 허용해줘야 한다.</p>\n<p>만약 179번 포트가 닫혀 있다면 BGP peering에 실패하게 되고 calico-node는 Unhealty 상태가 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ kubectl get po <span class=\"token parameter variable\">-n</span> kube-system\nNAME                                       READY   STATUS    RESTARTS   AGE\ncalico-kube-controllers-846d7f49d8-mjhnw   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">1</span>          3d\ncalico-node-7jkbx                          <span class=\"token number\">0</span>/1     Running   <span class=\"token number\">7</span>          3d\n<span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>describe를 해보면 peering에 실패했다는 메세지를 볼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ kubectl describe po calico-node-7jkbx <span class=\"token parameter variable\">-n</span> kube-system\n<span class=\"token punctuation\">..</span>.\nEvents:\n  Type     Reason          Age                  From     Message\n  ----     ------          ----                 ----     -------\n  Normal   Pulled          9m33s                kubelet  Container image <span class=\"token string\">\"docker.io/calico/node:v3.24.5\"</span> already present on machine\n  Normal   Created         9m33s                kubelet  Created container mount-bpffs\n  Normal   Started         9m33s                kubelet  Started container mount-bpffs\n  Warning  Unhealthy       4m20s                kubelet  Readiness probe failed: <span class=\"token number\">2022</span>-11-21 01:46:49.282 <span class=\"token punctuation\">[</span>INFO<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1063</span><span class=\"token punctuation\">]</span> confd/health.go <span class=\"token number\">180</span>: Number of node<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> with BGP peering established <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\ncalico/node is not ready: BIRD is not ready: BGP not established with <span class=\"token number\">10.0</span>.3.142,10.0.3.78</code></pre></div>\n<p>보안그룹에서 179번 포트를 허용해주면 BGP Peering에 성공하고 모든 calico-node는 READY 상태가 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ kubectl get po <span class=\"token parameter variable\">-n</span> kube-system\nNAME                                       READY   STATUS    RESTARTS   AGE\ncalico-kube-controllers-846d7f49d8-mjhnw   <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">1</span>          3d\ncalico-node-7jkbx                          <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">7</span>          3d\ncalico-node-z9xbl                          <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">1</span>          3d\ncalico-node-zcsbq                          <span class=\"token number\">1</span>/1     Running   <span class=\"token number\">1</span>          3d</code></pre></div>\n<h3>다른 노드 간 파드 통신</h3>\n<p>테스트를 위해 netshoot 컨테이너를 각 노드에서 실행하도록 하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ kubectl get po <span class=\"token parameter variable\">-o</span> wide\nNAME                       READY   STATUS        RESTARTS   AGE   IP                NODE      NOMINATED NODE   READINESS GATES\nnetshoot1                  <span class=\"token number\">1</span>/1     Running       <span class=\"token number\">0</span>          5s    <span class=\"token number\">192.168</span>.235.176   worker1   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>\nnetshoot2                  <span class=\"token number\">1</span>/1     Running       <span class=\"token number\">0</span>          5s    <span class=\"token number\">192.168</span>.189.175   worker2   <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span>           <span class=\"token operator\">&lt;</span>none<span class=\"token operator\">></span></code></pre></div>\n<p>아무런 설정 없이 통신할 경우 통신이 되지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ kubectl <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> netshoot1 -- <span class=\"token function\">bash</span>\nbash-5.2<span class=\"token comment\"># ping -c 1 192.168.189.175</span>\nPING <span class=\"token number\">192.168</span>.189.175 <span class=\"token punctuation\">(</span><span class=\"token number\">192.168</span>.189.175<span class=\"token punctuation\">)</span> <span class=\"token number\">56</span><span class=\"token punctuation\">(</span><span class=\"token number\">84</span><span class=\"token punctuation\">)</span> bytes of data.\n^C\n--- <span class=\"token number\">192.168</span>.189.175 <span class=\"token function\">ping</span> statistics ---\n<span class=\"token number\">1</span> packets transmitted, <span class=\"token number\">0</span> received, <span class=\"token number\">100</span>% packet loss, <span class=\"token function\">time</span> 0ms</code></pre></div>\n<p>두 가지 방법을 이용하여 이를 해결할 수 있다.</p>\n<h3>IP-in-IP 모드 사용</h3>\n<p>Calico를 설치하면 default mode로 <code class=\"language-text\">IP-in-IP</code> 모드를 사용한다.</p>\n<p>IP-in-IP 모드는 IP를 또 다른 IP 안에 집어 넣는 캡슐화를 수행한 뒤 통신하는 방법을 말한다.</p>\n<p>Calico는 IP-in-IP 모드를 사용하여 파드의 출발지, 목적지 IP를 <code class=\"language-text\">Inner IP header</code>에 넣고 <code class=\"language-text\">Outer IP header</code>에 노드의 출발지, 목적지 IP를 넣어 통신한다.</p>\n<p>(캡슐화를 통해 패킷은 자신이 가상 네트워크가 아닌 물리 네트워크에 존재한다고 생각한다.)</p>\n<p>하지만 기본적으로 AWS에서는 IP-in-IP 프로토콜을 허용하지 않는다.</p>\n<p>따라서 Calico의 IP-in-IP 모드를 사용하기 위해서는 보안그룹에 사용자 지정 프로토콜을 추가해줘야 한다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/59433441/202974442-2232e954-202c-4463-96fa-c1a738b48b41.png\" alt=\"calico-aws1\"></p>\n<p>다시 통신해보면 정상적으로 되는 것을 확인할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ kubectl <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> netshoot1 -- <span class=\"token function\">bash</span>\nbash-5.2<span class=\"token comment\"># ping -c 1 192.168.189.175</span>\nPING <span class=\"token number\">192.168</span>.189.175 <span class=\"token punctuation\">(</span><span class=\"token number\">192.168</span>.189.175<span class=\"token punctuation\">)</span> <span class=\"token number\">56</span><span class=\"token punctuation\">(</span><span class=\"token number\">84</span><span class=\"token punctuation\">)</span> bytes of data.\n<span class=\"token number\">64</span> bytes from <span class=\"token number\">192.168</span>.189.175: <span class=\"token assign-left variable\">icmp_seq</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">ttl</span><span class=\"token operator\">=</span><span class=\"token number\">62</span> <span class=\"token assign-left variable\">time</span><span class=\"token operator\">=</span><span class=\"token number\">0.508</span> ms\n\n--- <span class=\"token number\">192.168</span>.189.175 <span class=\"token function\">ping</span> statistics ---\n<span class=\"token number\">1</span> packets transmitted, <span class=\"token number\">1</span> received, <span class=\"token number\">0</span>% packet loss, <span class=\"token function\">time</span> 0ms</code></pre></div>\n<p>AWS는 왜 IP-in-IP 모드를 기본적으로 허용하지 않을까?</p>\n<p>→ AWS는 사용자가 보안 그룹에서 허용한 포트 및 프로토콜 외의 통신은 모두 차단하고 있다. 보안을 위해 최소한의 규칙을 추가해서 사용하는 것이 좋은데, 이를 위해 애초에 모든 규칙을 막아 놓은 것 같다.</p>\n<h3>Direct 모드 사용</h3>\n<p>IP-in-IP 모드 대신 <code class=\"language-text\">Direct</code> 모드를 사용하여 이를 해결할 수도 있다.</p>\n<p>Direct 모드는 <code class=\"language-text\">IP-in-IP</code> 모드와 달리 캡슐화를 진행하지 않고 파드에서 파드로 직접 보낸 것처럼 동작한다.</p>\n<p>(호스트 네트워크를 라우팅 할 때 파드 IP가 그대로 노출된다.)</p>\n<p>Direct 모드를 사용하기 위해서는 IP-in-IP 모드를 비활성화 해야 한다.</p>\n<p>이를 위해 Calico의 ippool 설정을 변경한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># calicoctl이 먼저 설치되어 있어야 한다.</span>\n$ calicoctl get ippool default-ipv4-ippool <span class=\"token parameter variable\">-o</span> yaml <span class=\"token operator\">></span> calico-ippool.yaml</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># calico-ippool.yaml</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> projectcalico.org/v3\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> IPPool\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">creationTimestamp</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'2022-11-21T02:48:58Z'</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> default<span class=\"token punctuation\">-</span>ipv4<span class=\"token punctuation\">-</span>ippool\n  <span class=\"token key atrule\">resourceVersion</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'523311'</span>\n  <span class=\"token key atrule\">uid</span><span class=\"token punctuation\">:</span> e060c782<span class=\"token punctuation\">-</span>2c8f<span class=\"token punctuation\">-</span>4a05<span class=\"token punctuation\">-</span>84ae<span class=\"token punctuation\">-</span>2ca39b0c0038\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">blockSize</span><span class=\"token punctuation\">:</span> <span class=\"token number\">26</span>\n  <span class=\"token key atrule\">cidr</span><span class=\"token punctuation\">:</span> 192.168.0.0/16\n  <span class=\"token key atrule\">ipipMode</span><span class=\"token punctuation\">:</span> Never <span class=\"token comment\"># Direct 모드를 사용하기 위해 Always > Never 변경</span>\n  <span class=\"token key atrule\">natOutgoing</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">nodeSelector</span><span class=\"token punctuation\">:</span> all()\n  <span class=\"token key atrule\">vxlanMode</span><span class=\"token punctuation\">:</span> Never</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># apply 명령을 통해 변경된 설정을 적용한다.</span>\n$ calicoctl apply <span class=\"token parameter variable\">-f</span> calico-ippool.yaml\nSuccessfully applied <span class=\"token number\">1</span> <span class=\"token string\">'IPPool'</span> resource<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></code></pre></div>\n<p>하지만 모드를 변경한다고 해서 통신이 되지 않는다.</p>\n<p>이는 AWS의 <code class=\"language-text\">src/dst</code> IP 확인 기능 때문인데, 이 기능은 목적지의 IP가 호스트 네트워크의 IP가 아닌 경우 패킷을 차단하는 역할을 한다.</p>\n<p>현재 호스트 네트워크와 파드 네트워크 IP가 다르므로 이를 해제해야 한다.</p>\n<p>EC2에서 인스턴스를 클릭한 뒤 <code class=\"language-text\">작업 > 네트워킹 > 소스/대상 확인 변경 > 소스/대상 확인 중지</code>를 체크하여 비활성화 하면 된다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/59433441/202974447-cb85516d-83c0-44f9-8a78-5bfb00b58058.png\" alt=\"calico-aws2\"></p>\n<p>설정을 완료했다면 정상적으로 통신이 가능한 것을 확인할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ kubectl <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> netshoot1 -- <span class=\"token function\">bash</span>\nbash-5.2<span class=\"token comment\"># ping -c 1 192.168.189.175</span>\nPING <span class=\"token number\">192.168</span>.189.175 <span class=\"token punctuation\">(</span><span class=\"token number\">192.168</span>.189.175<span class=\"token punctuation\">)</span> <span class=\"token number\">56</span><span class=\"token punctuation\">(</span><span class=\"token number\">84</span><span class=\"token punctuation\">)</span> bytes of data.\n<span class=\"token number\">64</span> bytes from <span class=\"token number\">192.168</span>.189.175: <span class=\"token assign-left variable\">icmp_seq</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token assign-left variable\">ttl</span><span class=\"token operator\">=</span><span class=\"token number\">62</span> <span class=\"token assign-left variable\">time</span><span class=\"token operator\">=</span><span class=\"token number\">0.508</span> ms\n\n--- <span class=\"token number\">192.168</span>.189.175 <span class=\"token function\">ping</span> statistics ---\n<span class=\"token number\">1</span> packets transmitted, <span class=\"token number\">1</span> received, <span class=\"token number\">0</span>% packet loss, <span class=\"token function\">time</span> 0ms</code></pre></div>\n<p>위에서 언급한 것처럼 Direct 모드는 IP-in-IP 모드와 달리 캡슐화, 디캡슐화 오버헤드가 없기 때문에 성능상 이점이 있다는 장점이 있다.</p>\n<p>참고로 Direct 모드를 사용하면 <code class=\"language-text\">tunl0</code> 인터페이스를 이용한 overlay 네트워크를 사용하지 않고 직접 통신하기 때문에 호스트의 라우팅 테이블이 변경된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># IP-in-IP 모드 사용하는 경우</span>\n$ route <span class=\"token parameter variable\">-n</span>\nKernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\n<span class=\"token number\">0.0</span>.0.0         <span class=\"token number\">10.0</span>.3.1        <span class=\"token number\">0.0</span>.0.0         UG    <span class=\"token number\">100</span>    <span class=\"token number\">0</span>        <span class=\"token number\">0</span> ens5\n<span class=\"token number\">10.0</span>.0.2        <span class=\"token number\">10.0</span>.3.1        <span class=\"token number\">255.255</span>.255.255 UGH   <span class=\"token number\">100</span>    <span class=\"token number\">0</span>        <span class=\"token number\">0</span> ens5\n<span class=\"token number\">10.0</span>.3.0        <span class=\"token number\">0.0</span>.0.0         <span class=\"token number\">255.255</span>.255.0   U     <span class=\"token number\">100</span>    <span class=\"token number\">0</span>        <span class=\"token number\">0</span> ens5\n<span class=\"token number\">10.0</span>.3.1        <span class=\"token number\">0.0</span>.0.0         <span class=\"token number\">255.255</span>.255.255 UH    <span class=\"token number\">100</span>    <span class=\"token number\">0</span>        <span class=\"token number\">0</span> ens5\n<span class=\"token number\">172.17</span>.0.0      <span class=\"token number\">0.0</span>.0.0         <span class=\"token number\">255.255</span>.0.0     U     <span class=\"token number\">0</span>      <span class=\"token number\">0</span>        <span class=\"token number\">0</span> docker0\n<span class=\"token number\">192.168</span>.189.64  <span class=\"token number\">10.0</span>.3.78       <span class=\"token number\">255.255</span>.255.192 UG    <span class=\"token number\">0</span>      <span class=\"token number\">0</span>        <span class=\"token number\">0</span> tunl0\n<span class=\"token number\">192.168</span>.189.173 <span class=\"token number\">10.0</span>.3.78       <span class=\"token number\">255.255</span>.255.255 UGH   <span class=\"token number\">0</span>      <span class=\"token number\">0</span>        <span class=\"token number\">0</span> tunl0\n<span class=\"token number\">192.168</span>.189.175 <span class=\"token number\">10.0</span>.3.78       <span class=\"token number\">255.255</span>.255.255 UGH   <span class=\"token number\">0</span>      <span class=\"token number\">0</span>        <span class=\"token number\">0</span> tunl0\n<span class=\"token number\">192.168</span>.219.64  <span class=\"token number\">0.0</span>.0.0         <span class=\"token number\">255.255</span>.255.192 U     <span class=\"token number\">0</span>      <span class=\"token number\">0</span>        <span class=\"token number\">0</span> *\n<span class=\"token number\">192.168</span>.219.74  <span class=\"token number\">0.0</span>.0.0         <span class=\"token number\">255.255</span>.255.255 UH    <span class=\"token number\">0</span>      <span class=\"token number\">0</span>        <span class=\"token number\">0</span> cali4d001776093\n<span class=\"token number\">192.168</span>.219.75  <span class=\"token number\">0.0</span>.0.0         <span class=\"token number\">255.255</span>.255.255 UH    <span class=\"token number\">0</span>      <span class=\"token number\">0</span>        <span class=\"token number\">0</span> calif639aaac1eb\n<span class=\"token number\">192.168</span>.219.76  <span class=\"token number\">0.0</span>.0.0         <span class=\"token number\">255.255</span>.255.255 UH    <span class=\"token number\">0</span>      <span class=\"token number\">0</span>        <span class=\"token number\">0</span> calia782baf2d95\n<span class=\"token number\">192.168</span>.235.128 <span class=\"token number\">10.0</span>.3.142      <span class=\"token number\">255.255</span>.255.192 UG    <span class=\"token number\">0</span>      <span class=\"token number\">0</span>        <span class=\"token number\">0</span> tunl0</code></pre></div>\n<p>Direct 모드를 사용하는 경우의 라우팅 테이블을 보면 tunl0 인터페이스 대신 호스트의 ens5 인터페이스로 경로가 변경된 것을 확인할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Direct 모드 사용하는 경우</span>\n$ route <span class=\"token parameter variable\">-n</span>\nKernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\n<span class=\"token number\">0.0</span>.0.0         <span class=\"token number\">10.0</span>.3.1        <span class=\"token number\">0.0</span>.0.0         UG    <span class=\"token number\">100</span>    <span class=\"token number\">0</span>        <span class=\"token number\">0</span> ens5\n<span class=\"token number\">10.0</span>.0.2        <span class=\"token number\">10.0</span>.3.1        <span class=\"token number\">255.255</span>.255.255 UGH   <span class=\"token number\">100</span>    <span class=\"token number\">0</span>        <span class=\"token number\">0</span> ens5\n<span class=\"token number\">10.0</span>.3.0        <span class=\"token number\">0.0</span>.0.0         <span class=\"token number\">255.255</span>.255.0   U     <span class=\"token number\">100</span>    <span class=\"token number\">0</span>        <span class=\"token number\">0</span> ens5\n<span class=\"token number\">10.0</span>.3.1        <span class=\"token number\">0.0</span>.0.0         <span class=\"token number\">255.255</span>.255.255 UH    <span class=\"token number\">100</span>    <span class=\"token number\">0</span>        <span class=\"token number\">0</span> ens5\n<span class=\"token number\">172.17</span>.0.0      <span class=\"token number\">0.0</span>.0.0         <span class=\"token number\">255.255</span>.0.0     U     <span class=\"token number\">0</span>      <span class=\"token number\">0</span>        <span class=\"token number\">0</span> docker0\n<span class=\"token number\">192.168</span>.189.64  <span class=\"token number\">10.0</span>.3.78       <span class=\"token number\">255.255</span>.255.192 UG    <span class=\"token number\">0</span>      <span class=\"token number\">0</span>        <span class=\"token number\">0</span> ens5\n<span class=\"token number\">192.168</span>.189.173 <span class=\"token number\">10.0</span>.3.78       <span class=\"token number\">255.255</span>.255.255 UGH   <span class=\"token number\">0</span>      <span class=\"token number\">0</span>        <span class=\"token number\">0</span> ens5\n<span class=\"token number\">192.168</span>.189.175 <span class=\"token number\">10.0</span>.3.78       <span class=\"token number\">255.255</span>.255.255 UGH   <span class=\"token number\">0</span>      <span class=\"token number\">0</span>        <span class=\"token number\">0</span> ens5\n<span class=\"token number\">192.168</span>.219.64  <span class=\"token number\">0.0</span>.0.0         <span class=\"token number\">255.255</span>.255.192 U     <span class=\"token number\">0</span>      <span class=\"token number\">0</span>        <span class=\"token number\">0</span> *\n<span class=\"token number\">192.168</span>.219.74  <span class=\"token number\">0.0</span>.0.0         <span class=\"token number\">255.255</span>.255.255 UH    <span class=\"token number\">0</span>      <span class=\"token number\">0</span>        <span class=\"token number\">0</span> cali4d001776093\n<span class=\"token number\">192.168</span>.219.75  <span class=\"token number\">0.0</span>.0.0         <span class=\"token number\">255.255</span>.255.255 UH    <span class=\"token number\">0</span>      <span class=\"token number\">0</span>        <span class=\"token number\">0</span> calif639aaac1eb\n<span class=\"token number\">192.168</span>.219.76  <span class=\"token number\">0.0</span>.0.0         <span class=\"token number\">255.255</span>.255.255 UH    <span class=\"token number\">0</span>      <span class=\"token number\">0</span>        <span class=\"token number\">0</span> calia782baf2d95\n<span class=\"token number\">192.168</span>.235.128 <span class=\"token number\">10.0</span>.3.142      <span class=\"token number\">255.255</span>.255.192 UG    <span class=\"token number\">0</span>      <span class=\"token number\">0</span>        <span class=\"token number\">0</span> ens5</code></pre></div>\n<p>만약 Direct 모드를 사용하면서 다른 서브넷에 존재하는 노드의 파드와는 어떻게 통신할까?</p>\n<p>기본적으로 다른 서브넷에 존재하는 노드의 경우 호스트 네트워크에서 노드 IP를 알 수 없으므로 게이트웨이로 라우팅 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ route <span class=\"token parameter variable\">-n</span>\nKernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\n<span class=\"token number\">0.0</span>.0.0         <span class=\"token number\">10.0</span>.3.1        <span class=\"token number\">0.0</span>.0.0         UG    <span class=\"token number\">100</span>    <span class=\"token number\">0</span>        <span class=\"token number\">0</span> ens5\n<span class=\"token number\">10.0</span>.0.2        <span class=\"token number\">10.0</span>.3.1        <span class=\"token number\">255.255</span>.255.255 UGH   <span class=\"token number\">100</span>    <span class=\"token number\">0</span>        <span class=\"token number\">0</span> ens5\n<span class=\"token number\">10.0</span>.3.0        <span class=\"token number\">0.0</span>.0.0         <span class=\"token number\">255.255</span>.255.0   U     <span class=\"token number\">100</span>    <span class=\"token number\">0</span>        <span class=\"token number\">0</span> ens5\n<span class=\"token number\">10.0</span>.3.1        <span class=\"token number\">0.0</span>.0.0         <span class=\"token number\">255.255</span>.255.255 UH    <span class=\"token number\">100</span>    <span class=\"token number\">0</span>        <span class=\"token number\">0</span> ens5\n<span class=\"token number\">172.17</span>.0.0      <span class=\"token number\">0.0</span>.0.0         <span class=\"token number\">255.255</span>.0.0     U     <span class=\"token number\">0</span>      <span class=\"token number\">0</span>        <span class=\"token number\">0</span> docker0\n<span class=\"token comment\"># 다른 서브넷에 존재하는 노드의 파드 경우 게이트웨이로 라우팅</span>\n<span class=\"token number\">192.168</span>.189.78  <span class=\"token number\">10.0</span>.3.1        <span class=\"token number\">255.255</span>.255.192 UG    <span class=\"token number\">0</span>      <span class=\"token number\">0</span>        <span class=\"token number\">0</span> ens5</code></pre></div>\n<p>패킷이 게이트웨이에 도달하게 되면 게이트웨이는 패킷을 어디로 보내야할지 모르는 상황이 된다.</p>\n<p>위에서 언급했던 것처럼 Direct 모드는 패킷에 파드 IP를 그대로 사용하는데, 게이트웨이는 해당 IP가 호스트 네트워크 IP가 아니기 때문이다.</p>\n<h3>CrossSubnet 모드 사용</h3>\n<p>이를 해결하기 위해 서브넷 간 통신에서만 IP-in-IP 기능을 활성화 할 수 있는 <code class=\"language-text\">CrossSubnet</code> 기능을 이용하면 된다.</p>\n<p><code class=\"language-text\">CrossSubnet</code> 기능을 이용하면 서브넷 내에서는 Direct 모드를 사용하고, 서브넷 간 통신에서는 IP-in-IP 모드를 사용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># calico-ippool.yaml</span>\n<span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> projectcalico.org/v3\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> IPPool\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">creationTimestamp</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'2022-11-21T02:48:58Z'</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> default<span class=\"token punctuation\">-</span>ipv4<span class=\"token punctuation\">-</span>ippool\n  <span class=\"token key atrule\">resourceVersion</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'523311'</span>\n  <span class=\"token key atrule\">uid</span><span class=\"token punctuation\">:</span> e060c782<span class=\"token punctuation\">-</span>2c8f<span class=\"token punctuation\">-</span>4a05<span class=\"token punctuation\">-</span>84ae<span class=\"token punctuation\">-</span>2ca39b0c0038\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">blockSize</span><span class=\"token punctuation\">:</span> <span class=\"token number\">26</span>\n  <span class=\"token key atrule\">cidr</span><span class=\"token punctuation\">:</span> 192.168.0.0/16\n  <span class=\"token key atrule\">ipipMode</span><span class=\"token punctuation\">:</span> CrossSubnet <span class=\"token comment\"># CrossSubnet 모드를 사용하기 위해 Never > CrossSubnet 변경</span>\n  <span class=\"token key atrule\">natOutgoing</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">nodeSelector</span><span class=\"token punctuation\">:</span> all()\n  <span class=\"token key atrule\">vxlanMode</span><span class=\"token punctuation\">:</span> Never</code></pre></div>\n<p>설정을 변경한 후 라우팅 테이블을 확인해 보면 해당 라우팅에 한해서 정보가 변경되었음을 확인할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ route <span class=\"token parameter variable\">-n</span>\nKernel IP routing table\nDestination     Gateway         Genmask         Flags Metric Ref    Use Iface\n<span class=\"token number\">0.0</span>.0.0         <span class=\"token number\">10.0</span>.3.1        <span class=\"token number\">0.0</span>.0.0         UG    <span class=\"token number\">100</span>    <span class=\"token number\">0</span>        <span class=\"token number\">0</span> ens5\n<span class=\"token number\">10.0</span>.0.2        <span class=\"token number\">10.0</span>.3.1        <span class=\"token number\">255.255</span>.255.255 UGH   <span class=\"token number\">100</span>    <span class=\"token number\">0</span>        <span class=\"token number\">0</span> ens5\n<span class=\"token number\">10.0</span>.3.0        <span class=\"token number\">0.0</span>.0.0         <span class=\"token number\">255.255</span>.255.0   U     <span class=\"token number\">100</span>    <span class=\"token number\">0</span>        <span class=\"token number\">0</span> ens5\n<span class=\"token number\">10.0</span>.3.1        <span class=\"token number\">0.0</span>.0.0         <span class=\"token number\">255.255</span>.255.255 UH    <span class=\"token number\">100</span>    <span class=\"token number\">0</span>        <span class=\"token number\">0</span> ens5\n<span class=\"token number\">172.17</span>.0.0      <span class=\"token number\">0.0</span>.0.0         <span class=\"token number\">255.255</span>.0.0     U     <span class=\"token number\">0</span>      <span class=\"token number\">0</span>        <span class=\"token number\">0</span> docker0\n<span class=\"token comment\"># ens5 인터페이스가 아닌 tunl0 인터페이스로 변경</span>\n<span class=\"token number\">192.168</span>.189.78  <span class=\"token number\">10.0</span>.3.78       <span class=\"token number\">255.255</span>.255.192 UG    <span class=\"token number\">0</span>      <span class=\"token number\">0</span>        <span class=\"token number\">0</span> tunl0</code></pre></div>\n<hr>\n<p>참고</p>\n<ul>\n<li><a href=\"https://projectcalico.docs.tigera.io/reference/public-cloud/aws\">https://projectcalico.docs.tigera.io/reference/public-cloud/aws</a></li>\n</ul>","fields":{"readingTime":{"text":"12 min read"}},"frontmatter":{"title":"쿠버네티스에서 Calico 사용하기 in AWS","date":"November 22, 2022"}}},"pageContext":{"slug":"/k8s-calico-aws/","previous":{"fields":{"slug":"/k8s-service/"},"frontmatter":{"title":"쿠버네티스 서비스","tags":["kubernetes"]}},"next":{"fields":{"slug":"/kubeadm-cloud-provider-aws/"},"frontmatter":{"title":"AWS에서 쿠버네티스 클러스터 구축하기","tags":["kubernetes","aws"]}}}},"staticQueryHashes":["3649515864","461697574","983108779"],"slicesMap":{}}