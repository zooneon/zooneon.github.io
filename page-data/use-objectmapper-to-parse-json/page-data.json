{"componentChunkName":"component---src-templates-blog-post-js","path":"/use-objectmapper-to-parse-json/","result":{"data":{"site":{"siteMetadata":{"title":"zooneon's log","author":"zooneon"}},"markdownRemark":{"id":"a4d8344a-8840-5e5a-b548-4b4310f783a5","excerpt":"프로젝트를 진행하면서 로그인 기능을 구현하기 위해 카카오 api를 사용하였다.\n발급 받은 client_id와 redirect_uri를 포함하여 요청을 보냈더니 JSON 형태로 응답을 받을 수 있었다.\n그다음 응답받은 JSON 객체를 POJO…","html":"<p>프로젝트를 진행하면서 로그인 기능을 구현하기 위해 카카오 api를 사용하였다.<br/>\n발급 받은 client_id와 redirect_uri를 포함하여 요청을 보냈더니 JSON 형태로 응답을 받을 수 있었다.<br/>\n그다음 응답받은 JSON 객체를 POJO 형태로 deserialization 시켜 내가 사용하고자 하는 데이터를 JSON 객체로부터 가져와야했다.<br/>\n나는 여기서 JSON 객체를 역직렬화 시키기 위해 사람들이 많이 사용하고 유명한 Jackson 라이브러리의 ObjectMapper 클래스를 이용하였다.<br/>\n내가 ObjectMapper 클래스를 이용하여 JSON 객체를 역직렬화 시켰던 과정을 정리해보려 한다.<br/></p>\n<h2>ObjectMapper란?</h2>\n<ul>\n<li>JSON 컨텐츠를 Java 객체로 deserialization 하거나 Java 객체를 JSON으로 serialization 할 때 사용하는 Jackson 라이브러리의 클래스이다.</li>\n<li>ObjectMapper는 생성 비용이 비싸기 때문에 bean/static으로 처리하는 것이 좋다.</li>\n</ul>\n<p>Jackson 라이브러리에 관한 내용은 더 공부하고 나중에 따로 작성해보도록 하겠다.<br/></p>\n<h2>ObjectMapper 이용하기</h2>\n<p>ObjectMapper를 이용하면 JSON을 Java 객체로 변환할 수 있고, 반대로 Java 객체를 JSON 객체로 serialization 할 수 있다.<br/>\n아래와 같은 Person 클래스를 이용하여 어떻게 사용하는지 간단하게 알아보자<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AllArgsConstructor</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Getter</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">NoArgsConstructor</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">lombok<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ToString</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@ToString</span>\n<span class=\"token annotation punctuation\">@AllArgsConstructor</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> address<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Java Object → JSON</h3>\n<p>Java 객체를 JSON으로 serialization 하기 위해서는 ObjectMapper의 <code class=\"language-text\">writeValue()</code> 메서드를 이용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fasterxml<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span>databind<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectMapper</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">File</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IOException</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ObjectMapperEx</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ObjectMapper</span> objectMapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t<span class=\"token comment\">// Java Object ->  JSON</span>\n        <span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zooneon\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"seoul\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">writeValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"src/person.json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 파라미터로 JSON을 저장할 파일과 직렬화시킬 객체를 넣어주면 된다.<br/>\n여기서 주의할 점은 JSON으로 직렬화 시킬 클래스에 Getter가 존재해야 한다는 것이다.<br/>\nJackson 라이브러리는 Getter와 Setter를 이용하여 prefix를 잘라내고 맨 앞을 소문자로 만드는 것으로 필드를 식별한다.<br/>\n그렇기 때문에 만약 직렬화 시킬 클래스에 Getter가 존재하지 않으면 클래스에서 필드를 식별하고 못하고 결국 값을 가져오지 못하여 에러가 발생하게 된다.<br/>\n정상실행하면 다음과 같이 내가 지정한 경로에 json파일이 생성된다.<br/></p>\n<img width=\"400\" alt=\"1\" src=\"https://user-images.githubusercontent.com/59433441/152308206-78531cd3-25be-48fc-b169-0243e2666220.png\">\n<p>파일을 열어보면 Java 객체로 넣어줬던 값들이 JSON 형태로 잘 저장되어 있는 것을 볼 수 있다.<br/></p>\n<p><strong>src/person.json</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"zooneon\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"address\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"seoul\"</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<h3>JSON → Java Object</h3>\n<p>JSON 파일을 Java 객체로 deserialization 하기 위해서는 ObjectMapper의 <code class=\"language-text\">readValue()</code> 메서드를 이용한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fasterxml<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JsonProcessingException</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fasterxml<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span>databind<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectMapper</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ObjectMapperEx</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ObjectMapper</span> objectMapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// JSON -> Java Object</span>\n        <span class=\"token class-name\">String</span> json <span class=\"token operator\">=</span> <span class=\"token string\">\"{\\\"name\\\":\\\"zooneon\\\",\\\"age\\\":25,\\\"address\\\":\\\"seoul\\\"}\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Person</span> deserializedPerson <span class=\"token operator\">=</span> objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">readValue</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>deserializedPerson<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonProcessingException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 실행 결과: Person(name=zooneon, age=25, address=seoul)</span></code></pre></div>\n<p>위와 같이 파라미터로 JSON 형태의 문자열 or 객체와 역직렬화 시킬 클래스를 넣어주면 된다.<br/>\n여기서 주의할 점이 있는데, 역직렬화 시킬 클래스(여기서는 Person 클래스)에 JSON을 파싱한 결과를 전달할 생성자가 있어야 한다.<br/>\n나는 기본 생성자를 이용하였지만 생성자에 Jackson 라이브러리의 <code class=\"language-text\">@JsonCreator</code> 어노테이션을 쓰는 등 다양한 방법이 있다.<br/>\n만약 다음과 같은 에러가 발생한다면, 클래스에 적절한 생성자가 없는 경우이다.<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fasterxml<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span>databind<span class=\"token punctuation\">.</span>exc<span class=\"token punctuation\">.</span></span>InvalidDefinitionException</span><span class=\"token operator\">:</span> <span class=\"token class-name\">Cannot</span> construct instance of `<span class=\"token class-name\">Person</span>` <span class=\"token punctuation\">(</span>no <span class=\"token class-name\">Creators</span><span class=\"token punctuation\">,</span> like <span class=\"token keyword\">default</span> constructor<span class=\"token punctuation\">,</span> exist<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> cannot deserialize from <span class=\"token class-name\">Object</span> value <span class=\"token punctuation\">(</span>no delegate<span class=\"token operator\">-</span> or property<span class=\"token operator\">-</span>based <span class=\"token class-name\">Creator</span><span class=\"token punctuation\">)</span>\n at <span class=\"token punctuation\">[</span><span class=\"token class-name\">Source</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token string\">\"{\"</span>name<span class=\"token string\">\":\"</span>zooneon<span class=\"token string\">\",\"</span>age<span class=\"token string\">\":25,\"</span>address<span class=\"token string\">\":\"</span>seoul<span class=\"token string\">\"}\"</span><span class=\"token punctuation\">;</span> line<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> column<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n\tat <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fasterxml<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span>databind<span class=\"token punctuation\">.</span>exc<span class=\"token punctuation\">.</span></span>InvalidDefinitionException</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">InvalidDefinitionException</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">67</span><span class=\"token punctuation\">)</span>\n\tat <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fasterxml<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span>databind<span class=\"token punctuation\">.</span></span>DeserializationContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">reportBadDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DeserializationContext</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">1764</span><span class=\"token punctuation\">)</span>\n\tat <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fasterxml<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span>databind<span class=\"token punctuation\">.</span></span>DatabindContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">reportBadDefinition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DatabindContext</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span>\n\tat <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fasterxml<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span>databind<span class=\"token punctuation\">.</span></span>DeserializationContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleMissingInstantiator</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DeserializationContext</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">1209</span><span class=\"token punctuation\">)</span>\n\tat <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fasterxml<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span>databind<span class=\"token punctuation\">.</span>deser<span class=\"token punctuation\">.</span></span>BeanDeserializerBase</span><span class=\"token punctuation\">.</span><span class=\"token function\">deserializeFromObjectUsingNonDefault</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanDeserializerBase</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">1415</span><span class=\"token punctuation\">)</span>\n\tat <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fasterxml<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span>databind<span class=\"token punctuation\">.</span>deser<span class=\"token punctuation\">.</span></span>BeanDeserializer</span><span class=\"token punctuation\">.</span><span class=\"token function\">deserializeFromObject</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanDeserializer</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">362</span><span class=\"token punctuation\">)</span>\n\tat <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fasterxml<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span>databind<span class=\"token punctuation\">.</span>deser<span class=\"token punctuation\">.</span></span>BeanDeserializer</span><span class=\"token punctuation\">.</span><span class=\"token function\">deserialize</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BeanDeserializer</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">195</span><span class=\"token punctuation\">)</span>\n\tat <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fasterxml<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span>databind<span class=\"token punctuation\">.</span>deser<span class=\"token punctuation\">.</span></span>DefaultDeserializationContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">readRootValue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DefaultDeserializationContext</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">322</span><span class=\"token punctuation\">)</span>\n\tat <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fasterxml<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span>databind<span class=\"token punctuation\">.</span></span>ObjectMapper</span><span class=\"token punctuation\">.</span><span class=\"token function\">_readMapAndClose</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">4593</span><span class=\"token punctuation\">)</span>\n\tat <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fasterxml<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span>databind<span class=\"token punctuation\">.</span></span>ObjectMapper</span><span class=\"token punctuation\">.</span><span class=\"token function\">readValue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">3548</span><span class=\"token punctuation\">)</span>\n\tat <span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fasterxml<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span>databind<span class=\"token punctuation\">.</span></span>ObjectMapper</span><span class=\"token punctuation\">.</span><span class=\"token function\">readValue</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">3516</span><span class=\"token punctuation\">)</span>\n\tat <span class=\"token class-name\">ObjectMapperEx</span><span class=\"token punctuation\">.</span><span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ObjectMapperEx</span><span class=\"token punctuation\">.</span>java<span class=\"token operator\">:</span><span class=\"token number\">22</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2>복잡한 JSON</h2>\n<p>그렇다면 복잡한 계층 형태의 JSON은 어떻게 파싱할까?</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"zooneon\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"age\"</span><span class=\"token operator\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"address\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"seoul\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"contact\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"phone_number\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0102222\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"foo@google.com\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"job\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"working\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"workplace\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Sejong Univ.\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token property\">\"position\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"student\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><del>나름 만든다고 만들었는데 억지로 끼워맞춘 느낌😅</del><br/>\n그렇게 복잡하지는 않지만 나름 복잡한(?) JSON을 파싱해보자<br/></p>\n<h3>내가 시도했던 방법 첫 번째</h3>\n<p>받아온 JSON에서 내가 필요한 데이터가 이름, 전화번호, 직장 이름이라고 가정해보자</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">ObjectMapper</span> objectMapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> person <span class=\"token operator\">=</span> objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">readValue</span><span class=\"token punctuation\">(</span>complicatedJson<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> contact <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"contact\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">String</span> phoneNumber <span class=\"token operator\">=</span> contact<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"phone_number\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> job <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"job\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> workplace <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">)</span> job<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"workplace\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">String</span> workplaceName <span class=\"token operator\">=</span> workplace<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>phoneNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>workplaceName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonProcessingException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 실행 결과: zooneon</span>\n<span class=\"token comment\">//\t\t    0102222</span>\n<span class=\"token comment\">//\t\t\tSejong Univ.</span></code></pre></div>\n<p>위와 같이 내가 필요한 데이터를 가져오기 위해 하나씩 파싱하였다.<br/>\n내가 보기에도 지저분해 보였고, 만약 JSON 파일이 더 복잡해진다면 훨씬 지저분해질 것이라는 생각이 들었다.<br/>\n그래서 어떻게 할지 생각하던 중, 같이 프로젝트를 진행하고 있는 유신님이 dto 클래스를 만들어서 한번에 매핑하는 것이 더 좋을 것 같다고 리뷰를 해주셨다.<br/>\n나도 그게 더 효율적일 것 같아서 코드를 수정하였다.<br/></p>\n<h3>내가 시도했던 방법 두 번째</h3>\n<p>위와 마찬가지로 받아온 JSON에서 내가 필요한 데이터가 이름, 전화번호, 직장 이름이라 가정하고 dto 역할을 할 클래스를 만들었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ToString</span>\n<span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PersonDto</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Contact</span> contact<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Job</span> job<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ToString</span>\n<span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token annotation punctuation\">@JsonNaming</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PropertyNamingStrategies<span class=\"token punctuation\">.</span>SnakeCaseStrategy</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Contact</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> phoneNumber<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> email<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>계층 형태의 JSON을 한번에 파싱하기 위해 위와 같이 내부 데이터를 위한 클래스를 따로 만들어주었다.<br/>\n이제 objectMapper를 이용하여 파싱을 진행할 텐데 그전에 설정해 주어야 하는 것이 있다.<br/></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DeserializationFeature</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FAIL_ON_UNKNOWN_PROPERTIES</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 설정을 통해 JSON의 모든 데이터를 파싱하는 것이 아닌 내가 필요로 하는 데이터, 즉 내가 필드로 선언한 데이터들만 파싱할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">ObjectMapper</span> objectMapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobjectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DeserializationFeature</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FAIL_ON_UNKNOWN_PROPERTIES</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">PersonDto</span> personDto <span class=\"token operator\">=</span> objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">readValue</span><span class=\"token punctuation\">(</span>complicatedJson<span class=\"token punctuation\">,</span> <span class=\"token class-name\">PersonDto</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>personDto<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>personDto<span class=\"token punctuation\">.</span><span class=\"token function\">getContact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPhoneNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>personDto<span class=\"token punctuation\">.</span><span class=\"token function\">getJob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getWorkplace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonProcessingException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 실행 결과: zooneon</span>\n<span class=\"token comment\">//\t\t    0102222</span>\n<span class=\"token comment\">//\t\t\tSejong Univ.</span></code></pre></div>\n<p>파싱할 클래스를 이용하니 훨씬 깔끔해진 느낌이 들었다.<br/>\n하지만 여기서도 아쉬운 부분이 있었다.<br/></p>\n<img width=\"400\" alt=\"2\" src=\"https://user-images.githubusercontent.com/59433441/152308173-32ef2781-002e-425e-9995-721183d718bb.png\">\n<p>내부 데이터를 파싱하기 위해 클래스들을 따로 만들다보니 파싱할 때를 제외하고는 필요하지 않은 클래스들이 많아졌다.<br/>\n이또한 JSON이 복잡해지면 불필요한 클래스들이 늘어날 것이고 유지보수하기 힘들 것이라는 생각이 들었다.<br/></p>\n<h3>내가 시도했던 방법 세 번째</h3>\n<p>그러던 중 새로운 클래스를 만드는 것이 아닌 내부 클래스를 이용하여 한 번에 파싱 할 수 있다는 방법을 알게 되었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ToString</span>\n<span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InnerClassPersonDto</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">InnerContact</span> contact<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">InnerJob</span> job<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Getter</span>\n    <span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n    <span class=\"token annotation punctuation\">@JsonNaming</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">PropertyNamingStrategies<span class=\"token punctuation\">.</span>SnakeCaseStrategy</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InnerContact</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> phoneNumber<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> email<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Getter</span>\n    <span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InnerJob</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> working<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">InnerWorkplace</span> workplace<span class=\"token punctuation\">;</span>\n\n        <span class=\"token annotation punctuation\">@Getter</span>\n        <span class=\"token annotation punctuation\">@NoArgsConstructor</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InnerWorkplace</span> <span class=\"token punctuation\">{</span>\n\n            <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> position<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>내부 클래스를 이용하여 하나의 dto 클래스에 파싱할 데이터를 위한 클래스들을 만들어주었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">ObjectMapper</span> objectMapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nobjectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DeserializationFeature</span><span class=\"token punctuation\">.</span><span class=\"token constant\">FAIL_ON_UNKNOWN_PROPERTIES</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">InnerClassPersonDto</span> innerClassPersonDto <span class=\"token operator\">=</span> objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">readValue</span><span class=\"token punctuation\">(</span>complicatedJson<span class=\"token punctuation\">,</span> <span class=\"token class-name\">InnerClassPersonDto</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>innerClassPersonDto<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>innerClassPersonDto<span class=\"token punctuation\">.</span><span class=\"token function\">getContact</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPhoneNumber</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>innerClassPersonDto<span class=\"token punctuation\">.</span><span class=\"token function\">getJob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getWorkplace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonProcessingException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 실행 결과: zooneon</span>\n<span class=\"token comment\">//\t\t\t0102222</span>\n<span class=\"token comment\">//\t\t\tSejong Univ.</span></code></pre></div>\n<p>위와 같이 파싱이 잘 되는 것을 확인할 수 있다.</p>\n<h3>내가 시도했던 방법 네 번째</h3>\n<p>내부 클래스를 이용하여 파싱하는 방법을 사용하다가 문득 만약에 JSON에 들어있는 데이터가 많고 그 데이터들을 다 파싱해야한다면 내부 클래스들도 많아질텐데, 그러면 가독성도 떨어지고 유지보수하기도 힘들지 않을까? 라는 생각이 들었다.<br/>\n그래서 해당 JSON을 파싱하기 위한 클래스들을 다시 외부 클래스로 나누고 패키지화하여 관리하는 방법이 더 나을 것 같다고 생각하였다.<br/></p>\n<img width=\"400\" alt=\"3\" src=\"https://user-images.githubusercontent.com/59433441/152308179-96b76281-569f-4e4c-8b30-351f0f21846c.png\">\n<p>파싱하는 방법은 두 번째와 동일하게 하면 된다.<br/>\n내가 했던 방법들보다 더 좋은 방법도 분명 있을 것 같은데 좀 더 고민해봐야겠다.<br/></p>\n<br/>\n<hr>","fields":{"readingTime":{"text":"12 min read"}},"frontmatter":{"title":"ObjectMapper를 이용하여 JSON 파싱하기","date":"July 11, 2021"}}},"pageContext":{"slug":"/use-objectmapper-to-parse-json/","previous":{"fields":{"slug":"/class-diagram/"},"frontmatter":{"title":"클래스 다이어그램","tags":null}},"next":{"fields":{"slug":"/spring-boot-profile/"},"frontmatter":{"title":"Spring Boot profile 설정하기","tags":null}}}},"staticQueryHashes":["3649515864","461697574","983108779"],"slicesMap":{}}