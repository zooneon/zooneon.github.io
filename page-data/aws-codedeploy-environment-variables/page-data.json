{"componentChunkName":"component---src-templates-blog-post-js","path":"/aws-codedeploy-environment-variables/","result":{"data":{"site":{"siteMetadata":{"title":"zooneon's log","author":"zooneon"}},"markdownRemark":{"id":"9686ea69-d035-5855-8f9c-27a1051f219e","excerpt":"해당 글은 AWS CodeDeploy 구축 과정을 설명하지 않습니다. 학교 캡스톤 프로젝트를 시작하게 되면서 서버를 띄우고 자동 배포 파이프라인 구축을 위해 Github Actions + AWS CodeDeploy…","html":"<blockquote>\n<p>해당 글은 AWS CodeDeploy 구축 과정을 설명하지 않습니다.</p>\n</blockquote>\n<p>학교 캡스톤 프로젝트를 시작하게 되면서 서버를 띄우고 자동 배포 파이프라인 구축을 위해 Github Actions + AWS CodeDeploy를 사용하고 있었다.</p>\n<p>둘 다 무료이고 리소스 사용량도 많지 않아 사정상 프리티어로(t2.micro) 개발 서버를 구축해야 하는 나에게는 좋은 선택지였다.</p>\n<p>문제는 CodeDeploy를 통한 배포 과정에서 발생하였다.</p>\n<p>분명 배포된 shell script를 실행하면 어플리케이션이 잘 동작하였는데 자동 배포 과정에서는 어플리케이션이 실행되지 않았다.</p>\n<p>대체 뭐가 문제인지 모르겠어서 로그 파일을 만들고 확인해보니 application.yml 파일에 등록해 놓은 환경변수를 주입받지 못하고 있었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># deploy.log</span>\njava.lang.RuntimeException: Driver com.mysql.cj.jdbc.Driver claims to not accept jdbcUrl, <span class=\"token variable\">${DATABASE_URL}</span>\n\tat com.zaxxer.hikari.util.DriverDataSource.<span class=\"token operator\">&lt;</span>init<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>DriverDataSource.java:110<span class=\"token punctuation\">)</span> ~<span class=\"token punctuation\">[</span>HikariCP-4.0.3.jar<span class=\"token operator\">!</span>/:na<span class=\"token punctuation\">]</span>\n\tat com.zaxxer.hikari.pool.PoolBase.initializeDataSource<span class=\"token punctuation\">(</span>PoolBase.java:331<span class=\"token punctuation\">)</span> ~<span class=\"token punctuation\">[</span>HikariCP-4.0.3.jar<span class=\"token operator\">!</span>/:na<span class=\"token punctuation\">]</span>\n\tat com.zaxxer.hikari.pool.PoolBase.<span class=\"token operator\">&lt;</span>init<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>PoolBase.java:114<span class=\"token punctuation\">)</span> ~<span class=\"token punctuation\">[</span>HikariCP-4.0.3.jar<span class=\"token operator\">!</span>/:na<span class=\"token punctuation\">]</span>\n\tat com.zaxxer.hikari.pool.HikariPool.<span class=\"token operator\">&lt;</span>init<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>HikariPool.java:108<span class=\"token punctuation\">)</span> ~<span class=\"token punctuation\">[</span>HikariCP-4.0.3.jar<span class=\"token operator\">!</span>/:na<span class=\"token punctuation\">]</span>\n\tat com.zaxxer.hikari.HikariDataSource.getConnection<span class=\"token punctuation\">(</span>HikariDataSource.java:112<span class=\"token punctuation\">)</span> ~<span class=\"token punctuation\">[</span>HikariCP-4.0.3.jar<span class=\"token operator\">!</span>/:na<span class=\"token punctuation\">]</span>\n\t<span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>개발 서버에서 사용할 데이터베이스 url과 username, password를 모두 공개해 놓으면 악의를 가진 사용자가 이를 활용해 데이터베이스를 마음대로 조작할 수 있기 때문에 환경변수로 처리하였다.</p>\n<p><del>물론 그렇게 관심 가질만한 프로젝트는 아니지만 혹시나 해서</del></p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># application.yml</span>\n<span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">config</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">activate</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">on-profile</span><span class=\"token punctuation\">:</span> dev\n  <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>DATABASE_URL<span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>DATABASE_USERNAME<span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>DATABASE_PASSWORD<span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> com.mysql.cj.jdbc.Driver</code></pre></div>\n<p>이렇게 해두고 개발 서버에 환경변수를 등록해 놓았는데 CodeDeploy는 배포 과정에서 이 변수들을 주입받지 못하였다.</p>\n<p>그래서 내가 직접 배포 스크립트를 실행하면 잘 동작하였지만 배포 과정에서는 동작하지 못하는 것이었다.</p>\n<p>docker를 이용할 때는 compose파일에 변수를 넣어서 컨테이너를 띄울 때 주입받도록 하였는데(물론 이도 좋은 방법은 아닐 것이다.) 지금은 배포 과정에서 주입해줘야 했다.</p>\n<p>그래서 그냥 배포 후 실행할 스크립트를 서버에 저장해두고(이렇게 하면 변수들을 public한 곳에서 숨긴 채로 배포할 수 있으니까?) CodeDeploy의 hook이 실행될 때 그 파일을 실행하도록 하였는데 정상적으로 작동하지 않았다.</p>\n<p>이유를 찾아보니 CodeDeploy는 hook을 실행할 때 <code class=\"language-text\">배포 ID</code>를 이름으로 하는 디렉토리 내부의 <code class=\"language-text\">deployment-archive</code> 디렉토리를 location으로 하여 해당 디렉토리 내에서 파일을 찾는 것 같았다.</p>\n<p>예를 들어 이런식으로</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">/opt/codedeploy-agent/deployment-root/9820b37d-a865-482e-b3d2-9f54ef466ab3/d-3D2Z6JP2G/deployment-archive</code></pre></div>\n<p>그리고 location 속성은 절대경로도 먹히지 않는 것 같았다.</p>\n<p>따라서 이렇게 <code class=\"language-text\">appspec.yml</code> 파일을 작성하였다면 <code class=\"language-text\">ScriptMissing</code> 에러가 발생하게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># appspec.yml</span>\nversion: <span class=\"token number\">0.0</span>\nos: linux\nfiles:\n  - source: /\n    destination: /home/ubuntu/app\n\nhooks:\n  ApplicationStart:\n    - location: /home/ubuntu/deploy.sh\n      timeout: <span class=\"token number\">60</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># ScriptMissing Error</span>\nScript does not exist at specified location: /opt/codedeploy-agent/deployment-root/9820b37d-a865-482e-b3d2-9f54ef466ab3/d-3D2Z6JP2G/deployment-archive/home/ubuntu/deploy.sh</code></pre></div>\n<p>따라서 어쩔 수 없이 프로젝트 디렉토리 내에 배포 스크립트를 작성하여 배포 시 같은 디렉토리에 위치하도록 하였다.(다른 방법이 있을 수도 있는데 내 한계였다..)</p>\n<p>그리고 다시 환경변수를 어떻게 주입할지 열심히 찾아보았다.</p>\n<h1>방법 1</h1>\n<p>열심히 구글링을 하다가 찾은 건데 <code class=\"language-text\">/etc/profile.d</code>에 CodeDeploy용 쉘스크립트를 작성하면 CodeDeploy가 환경변수를 읽을 수 있다는 것이었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># /etc/profile.d/codedeploy.sh</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">DATABASE_URL</span><span class=\"token operator\">=</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">DATABASE_USERNAME</span><span class=\"token operator\">=</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">DATABASE_PASSWORD</span><span class=\"token operator\">=</span></code></pre></div>\n<p>하지만 deprecated 됐는지 나는 정상적으로 작동하지 않았다.(조금 예전 글이긴 했다.)</p>\n<h1>방법 2</h1>\n<p>다음으로 찾은 방법은 AWS의 <code class=\"language-text\">Parameter Store</code>를 이용하는 방법이다.</p>\n<p>간단하게 Parameter Store에 대해 알아보자</p>\n<h2>Parameter Store란</h2>\n<p>Parameter Store은 민감한 데이터를 외부에서 주입할 수 있도록 해주는 AWS 서비스인데 무료로 이용할 수 있다.</p>\n<p>Parameter Store은 <code class=\"language-text\">AWS System Manager → Parameter Store</code>에서 생성할 수 있다.</p>\n<p>간단한 특징으로는</p>\n<ul>\n<li>key-value로 값을 저장</li>\n<li>KMS(Key Management Service)를 이용한 암호화된 값 저장 가능</li>\n<li>IAM을 이용하면 일부 사용자만 접근 가능</li>\n<li>값에 대한 변경 이력 저장</li>\n</ul>\n<p>등이 있다.</p>\n<h2>Parameter Store 등록</h2>\n<p><img src=\"https://user-images.githubusercontent.com/59433441/162748673-5efb91a8-6f3e-4e3a-8010-cc7f4846cd76.png\" alt=\"parameter store2\"></p>\n<p>파라미터는 이름, 타입, 값만 설정하면 쉽게 등록할 수 있다.</p>\n<p>여기서 이름(<code class=\"language-text\">Name</code>)은 슬래시(<code class=\"language-text\">/</code>)를 사용한 계층 구조를 사용한다.</p>\n<p><code class=\"language-text\">ex) /config/zooneon_dev/DATABASE_PASSWORD</code></p>\n<p>꼭 계층 구조를 사용할 필요는 없지만 파라미터 관리 용이 등의 이유로 이 방식이 권장된다.</p>\n<p>중요한 데이터의 경우 보안 문자열(<code class=\"language-text\">SecureString</code>)을 이용하여 암호화된 값을 저장할 수 있다.</p>\n<p>보안 문자열 사용 시 Parameter Store에서는 요금이 청구되지 않지만 AWS Key Management Service 암호화 사용에 대한 요금이 적용된다.</p>\n<p>파라미터를 등록하면 이름은 변경할 수 없고 값만 변경할 수 있으니 참고하자</p>\n<h2>Parameter Store 사용</h2>\n<p>파라미터를 등록했다면 어떻게 사용할까?</p>\n<p>프레임워크마다 다르겠지만 나는 현재 프로젝트에서 Spring Boot를 사용하고 있기 때문에 Spring Boot에서 사용하는 방법에 대해 알아보았다.(다른 프레임워크들도 찾아보면 자료가 있을 것이다.)</p>\n<p>사용한 버전은 Spring Boot 2.6.5, Gradle 7.4이다.</p>\n<h3>의존성 설정</h3>\n<p>나는 Spring Cloud Dependency가 없어 따로 추가하였다.</p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\">dependencyManagement <span class=\"token punctuation\">{</span>\n    imports <span class=\"token punctuation\">{</span>\n        mavenBom <span class=\"token string\">'io.awspring.cloud:spring-cloud-aws-dependencies:2.3.3'</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>다음으로 dependency에 <code class=\"language-text\">spring-cloud-starter-aws-parameter-store-config</code>을 추가해주면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\">dependencies <span class=\"token punctuation\">{</span>\n    implementation <span class=\"token string\">'org.springframework.boot:spring-boot-starter-web'</span>\n    testImplementation <span class=\"token string\">'org.springframework.boot:spring-boot-starter-test'</span>\n\t<span class=\"token comment\">//...</span>\n    <span class=\"token comment\">//parameter store</span>\n    implementation <span class=\"token string\">'io.awspring.cloud:spring-cloud-starter-aws-parameter-store-config'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>yaml 파일 설정</h3>\n<p>스프링 부트에 의존성을 추가했다면 이제 yaml 파일을 설정해줘야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\"># application.yml</span>\n<span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">config</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">activate</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">on-profile</span><span class=\"token punctuation\">:</span> dev\n    <span class=\"token comment\"># aws-parameterstore: 추가</span>\n    <span class=\"token key atrule\">import</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'aws-parameterstore:'</span>\n  <span class=\"token key atrule\">datasource</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>DATABASE_URL<span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>DATABASE_USERNAME<span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">password</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>DATABASE_PASSWORD<span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">driver-class-name</span><span class=\"token punctuation\">:</span> com.mysql.cj.jdbc.Driver\n\n<span class=\"token comment\"># 불러올 파라미터 설정</span>\n<span class=\"token key atrule\">aws</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">paramstore</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> docswant</code></pre></div>\n<p>기존 yaml 파일에 <code class=\"language-text\">spring.config.import</code> 속성을 이용하여 <code class=\"language-text\">aws-parameterstore:</code>를 추가하여 자동으로 파라미터를 불러오도록 설정한다.</p>\n<p>또한 하단에 <code class=\"language-text\">aws.paramstore</code> 속성을 이용하여 어떤 파라미터들을 불러올 지 설정할 수 있다.</p>\n<h3>aws.paramstore 속성</h3>\n<p><strong><code class=\"language-text\">prefix</code></strong></p>\n<ul>\n<li>파라미터의 prefix를 설정할 수 있다.</li>\n<li>prefix는 슬래시(<code class=\"language-text\">/</code>)로 시작해야 한다.</li>\n<li>default : /config</li>\n</ul>\n<p><strong><code class=\"language-text\">defaultContext</code></strong></p>\n<ul>\n<li>모든 서비스에서 공유되는 속성을 정의하는 컨텍스트 이름이다.</li>\n<li>default : application</li>\n</ul>\n<p><strong><code class=\"language-text\">profileSeparator</code></strong></p>\n<ul>\n<li>여러 환경에 배포할 수 있게 구분자를 사용할 수 있다.</li>\n<li>profile은 <code class=\"language-text\">spring.config.activate.on-profile</code> 속성에 설정된 값을 사용한다.</li>\n<li>profile이 존재하지 않으면 사용되지 않는다.</li>\n<li>dot(<code class=\"language-text\">.</code>), dash(<code class=\"language-text\">-</code>), forward slash(<code class=\"language-text\">/</code>), backward slash(<code class=\"language-text\">\\</code>), underscore(<code class=\"language-text\">_</code>)만 사용 가능하다.</li>\n<li>default : underscore(<code class=\"language-text\">_</code>)</li>\n</ul>\n<p><strong><code class=\"language-text\">failFast</code></strong></p>\n<ul>\n<li>파라미터를 읽지 못했을 때 어떻게 할지 결정한다.</li>\n<li>true이면 어플리케이션을 실행하지 못하도록 한다.</li>\n<li>default : true</li>\n</ul>\n<p><strong><code class=\"language-text\">name</code></strong></p>\n<ul>\n<li>파라미터의 식별자 어플리케이션 이름이다.</li>\n<li>파라미터를 어떤 어플리케이션에 적용할 건지 지정할 수 있다.</li>\n<li>값을 지정하지 않으면 <code class=\"language-text\">spring.application.name</code> 속성값을 참조한다.</li>\n<li>위 속성마저 존재하지 않으면 default 값을 사용한다.</li>\n<li>default : application</li>\n</ul>\n<p><strong><code class=\"language-text\">enabled</code></strong></p>\n<ul>\n<li>Parameter Store를 사용할지 선택한다.</li>\n<li>default : true</li>\n</ul>\n<h3>IAM 역할 등록</h3>\n<p>yaml 파일 설정을 완료했다면 Parameter Store에 접근할 수 있는 권한을 등록해야 한다.</p>\n<p>기존에 생성한 EC2 IAM 역할에 <code class=\"language-text\">AmazonSSMReadOnlyAccess</code> 권한을 추가한다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/59433441/162745927-a99a0fcc-30ea-42b7-9a28-1bff669a7754.png\" alt=\"iam2\"></p>\n<p>IAM을 등록한 후에 다시 배포를 하면 성공적으로 어플리케이션이 실행될 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># deploy.log</span>\n<span class=\"token builtin class-name\">.</span>   ____          _            __ _ _\n /<span class=\"token punctuation\">\\</span><span class=\"token punctuation\">\\</span> / ___<span class=\"token string\">'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '</span>_ <span class=\"token operator\">|</span> <span class=\"token string\">'_| | '</span>_ <span class=\"token punctuation\">\\</span>/ _` <span class=\"token operator\">|</span> <span class=\"token punctuation\">\\</span> <span class=\"token punctuation\">\\</span> <span class=\"token punctuation\">\\</span> <span class=\"token punctuation\">\\</span>\n <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">\\</span>/  ___<span class=\"token punctuation\">)</span><span class=\"token operator\">|</span> <span class=\"token operator\">|</span>_<span class=\"token punctuation\">)</span><span class=\"token operator\">|</span> <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>_<span class=\"token operator\">|</span> <span class=\"token operator\">|</span>  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n  <span class=\"token string\">'  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::                (v2.6.5)\n...\n...\n...\n2022-04-11 09:36:45.514  INFO 819 --- [           main] o.s.s.web.DefaultSecurityFilterChain     : Will not secure any request\n2022-04-11 09:36:46.536  INFO 819 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path '</span>'\n<span class=\"token number\">2022</span>-04-11 09:36:46.564  INFO <span class=\"token number\">819</span> --- <span class=\"token punctuation\">[</span>           main<span class=\"token punctuation\">]</span> s.capstone.docswant.DocswantApplication  <span class=\"token builtin class-name\">:</span> Started DocswantApplication <span class=\"token keyword\">in</span> <span class=\"token number\">12.712</span> seconds <span class=\"token punctuation\">(</span>JVM running <span class=\"token keyword\">for</span> <span class=\"token number\">14.137</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h1>마무리</h1>\n<p>거의 Parameter Store 글에 가까운 것 같지만</p>\n<p>그래도 내가 겪은 trouble shooting 과정을 겪는 사람들도 분명 있을 것이라 생각하기 때문에</p>\n<p>이 글을 보고 솔루션을 찾는데 조금이나마 도움이 되었으면 좋겠다.</p>\n<hr>\n<h3>참고</h3>\n<ul>\n<li><a href=\"https://godngu.github.io/aws/codedeploy-envrionment-variable\">https://godngu.github.io/aws/codedeploy-envrionment-variable</a></li>\n<li><a href=\"https://docs.awspring.io/spring-cloud-aws/docs/2.3.0/reference/html/index.html#integrating-your-spring-cloud-application-with-the-aws-parameter-store\">https://docs.awspring.io/spring-cloud-aws/docs/2.3.0/reference/html/index.html#integrating-your-spring-cloud-application-with-the-aws-parameter-store</a></li>\n</ul>","fields":{"readingTime":{"text":"11 min read"}},"frontmatter":{"title":"AWS CodeDeploy를 이용한 자동 배포 시 환경변수 주입하기 + Spring Boot","date":"April 11, 2022"}}},"pageContext":{"slug":"/aws-codedeploy-environment-variables/","previous":{"fields":{"slug":"/spring-boot-profile/"},"frontmatter":{"title":"Spring Boot profile 설정하기","tags":null}},"next":{"fields":{"slug":"/woowa-tech-seminar-april/"},"frontmatter":{"title":"4월 우아한테크세미나 정리","tags":null}}}},"staticQueryHashes":["3649515864","461697574","983108779"],"slicesMap":{}}